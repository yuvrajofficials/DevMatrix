userSchema.pre("save", async function (next) {
    if(!this.isModified("password")) return next();

    this.password = await bcrypt.hash(this.password, 10)
    next()
})

userSchema.methods.isPasswordCorrect = async function(password){
    return await bcrypt.compare(password, this.password)
}

userSchema.methods.generateAccessToken = function(){
    return jwt.sign(
        {
            _id: this._id,
            email: this.email,
            username: this.username,
            fullName: this.fullName
        },
        process.env.ACCESS_TOKEN_SECRET,
        {
            expiresIn: process.env.ACCESS_TOKEN_EXPIRY
        }
    )
}
userSchema.methods.generateRefreshToken = function(){
    return jwt.sign(
        {
            _id: this._id,
            
        },
        process.env.REFRESH_TOKEN_SECRET,
        {
            expiresIn: process.env.REFRESH_TOKEN_EXPIRY
        }
    )
}


  {
   $match: { $expr : { $eq: [ '$_id' , { $toObjectId: "66593646539123f80e552f6c" } ]  } }
    },

    import express from "express";
import asyncHandler from '../Utils/asyncHandler.js';
import { ApiError } from "../Utils/ApiError.js";
import { ApiResponse } from "../Utils/APIResponse.js";
import { addCartModel, courseModel } from "../Models/courseModel.js";
import slugify from "slugify";
import { userModel } from "../Models/userModel.js";
import mongoose from "mongoose";
import { v2 as cloudinary } from "cloudinary";
import multer from "multer";
import fs from "fs";


// Create a new course
// export const createCourse = asyncHandler(async (req, res) => {
//   const { title, creator, owner } = req.body;

//   try {
//     console.log("almost done")
//     const isExist = await courseModel.findOne({ title });

//     if (isExist) {
//       throw new ApiError(403, "Course Title Already Exists");
//     }

//     const resourceUpload = await cloudinary.uploader.upload(resourceFile, {
//       folder: 'resources'
//     });


//     const newCourse = new courseModel({
//       title,
//       creator,
//       owner,
//       slug: slugify(title).toLowerCase()
//     })


//     const createdCourse = await newCourse.save();
//     res.status(200).json({ success: true, data: createdCourse });
//   } catch (error) {
//     console.error('Error in Creating Course:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// });



export const createCourse = asyncHandler(async (req, res) => {
  const { title, creator, owner, price, description, } = req.body;
  const resourceFile = req.file.path;

  try {
    // Upload resource to Cloudinary
    console.log("almost done")
    const isExist = await courseModel.findOne({ title });

    if (isExist) {
      throw new ApiError(403, "Course Title Already Exists");
    }

    const resourceUpload = await cloudinary.uploader.upload(resourceFile, {
      folder: 'resources'
    });

    const newCourse = new courseModel({
      title,
      creator,
      price,
      description,
      owner,
      slug: slugify(title).toLowerCase(),
      thumbnail: resourceUpload.secure_url
    })

    // Create a new resource document


    const createdCourse = await newCourse.save();

    // Update the user to include the new resource's ID
    await userModel.findByIdAndUpdate(owner, { $push: { resources: createdCourse._id } });

    res.status(200).json({ success: true, data: createdCourse });
  } catch (error) {
    console.error('Error in Creating Course:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  } finally {
    // Cleanup: Remove the local file after uploading to Cloudinary
    fs.unlinkSync(resourceFile);
  }
});



// Get all courses
export const getAllCourse = asyncHandler(async (req, res) => {
  try {
    // const courses = await courseModel.find({}).populate('owner');
    const courses = await courseModel.aggregate(
      [
        {
          $match: {
            $expr: {
              $eq: [
                "$owner",
                {
                  $toObjectId:
                    "66593646539123f80e552f6c"
                }
              ]
            }
          }
        },
        {
          $lookup: {
            from: "videomodels",
            localField: "videos",
            foreignField: "_id",
            as: "videosource"
          }

        },
        {
          $project: {

            videosource: {
              $filter: {
                input: "$videosource",
                as: "video",
                cond: { $eq: ["$$video.isPublished", true] }
              }
            }
          },

        }
      ]
    )
    res.status(200).json({ success: true, data: courses });
  } catch (error) {
    console.error('Error in Getting Courses:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

export const getCourse = asyncHandler(async (req, res) => {
  try {

    const result = courseModel.aggregate([
      {
        $match: {
          slug: req.title
        }
      },
      {
        $project: {
          videos: 1,
          title: 1,


        }
      }
    ]).exec()
      .then(results => {
        res.status(200).json({ success: true, data: results });
        // Process aggregated results here
      })
      .catch(err => {
        console.error('Error executing aggregation:', err);
      });

  } catch (error) {
    console.error('Error in Getting Courses:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

export const getMyCreatedCourse = asyncHandler(async (req, res) => {
  try {
    const owner = req.body.owner; // Assuming userId is passed in the request body
    console.log(owner)
    const mycourses = await userModel.aggregate([
      {
        $match: { $expr: { $eq: ['$_id', { $toObjectId: "66593646539123f80e552f6c" }] } }


      },
      {
        $lookup: {
          from: "coursemodels", // Ensure this matches the actual collection name
          localField: "_id",
          foreignField: "owner",
          as: "mycourses"
        }
      },
      {
        $project: {
          mycourses: 1
        }

      }, {
        $unwind: {
          path: "$mycourses"
        }
      }, {
        $project: {
          "mycourses.title": 1,
          "mycourses._id": 1,


        }


      }

    ]);

    res.status(200).json({ success: true, data: mycourses });
  } catch (error) {
    console.error('Error in Getting User Courses:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


export const addToCart = asyncHandler(async (req, res) => {
  const { userId, courseId } = req.body;

  try {
    console.log("almost done")
    const isExist = await addCartModel.findOne({ courseId });

    if (isExist) {
      new ApiResponse(200, "Already added to cart")
    }

    const newCartCourse = new addCartModel({
      userId,
      courseId,
    })


    const addedCourse = await newCartCourse.save();
    new ApiResponse(200, "Course Added to Cart")
  } catch (error) {
    console.error('Error in adding Course to cart :', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }

});


export const getCourseDetails = asyncHandler(async (req, res) => {
  try {
    const { courseId } = req.body;
    
    const courseDetails = await courseModel.aggregate([
      {
        $match: {
          _id: mongoose.Types.ObjectId(courseId) // Match the course by its ObjectId
        }
      },
      {
        $lookup: {
          from: 'videomodels',
          localField: 'videos',
          foreignField: '_id',
          as: 'videodetails'
        }
      },
      {
        $project: {
          _id: 1,
          title: 1,
          description: 1,
          price: 1,
          thumbnail: 1,
          'videodetails._id': 1,
          'videodetails.videoFile': 1,
          'videodetails.thumbnail': 1,
          'videodetails.title': 1,
          'videodetails.description': 1,
          'videodetails.views': 1,
          'videodetails.isPublished': 1
        }
      },
      {
        $addFields: {
          videodetails: {
            $filter: {
              input: '$videodetails',
              as: 'video',
              cond: { $eq: ['$$video.isPublished', true] }
            }
          }
        }
      }
    ]);

    res.status(200).json({ success: true, data: courseDetails });
  } catch (error) {
    console.error('Error in Getting Courses:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});